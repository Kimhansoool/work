{"ast":null,"code":"/**\r\n * /src/helper/ReduxHelper.js\r\n * \r\n * ReduxSlice를 작업하면서 반복되는 중복코드의 모듈화\r\n */\n\nimport { createSlice } from \"@reduxjs/toolkit\";\n\n// 리덕스가 로딩상태를 처리하기 위한 함수\nfunction pending(state, {\n  meta,\n  payload\n}) {\n  return {\n    ...state,\n    loading: true\n  };\n}\n\n// 리덕스가 백엔드와의 통신에 성공한 경우 실행되는 함수\nfunction fulfilled(state, {\n  meta,\n  payload\n}) {\n  return {\n    ...state,\n    data: payload,\n    loading: false,\n    error: null\n  };\n}\n\n// 리덕스가 백엔드와의 통신에 실패한 경우 실행되는 함수\nfunction rejected(state, {\n  meta,\n  payload\n}) {\n  return {\n    data: payload,\n    loading: false,\n    error: {\n      code: payload !== null && payload !== void 0 && payload.status ? payload === null || payload === void 0 ? void 0 : payload.status : 500,\n      message: payload !== null && payload !== void 0 && payload.statusText ? payload === null || payload === void 0 ? void 0 : payload.statusText : 'Server Error'\n    }\n  };\n}\nfunction getDefaultSlice(sliceName, asyncReducers = []) {\n  return createSlice({\n    name: sliceName,\n    // 이 모듈이 관리하고자하는 상태값들을 명시\n    initialState: {\n      data: null,\n      loading: false,\n      error: null\n    },\n    // 상태값을 갱신하기 위한 함수들을 구현\n    // Ajax의 처리 과정에 따라 자동으로 실행된다.\n    extraReducers: builder => {\n      asyncReducers.forEach((item, index) => {\n        builder.addCase(item.pending, pending);\n        builder.addCase(item.fulfilled, fulfilled);\n        builder.addCase(item.rejected, rejected);\n      });\n    }\n  });\n}\nexport default getDefaultSlice;","map":{"version":3,"names":["createSlice","pending","state","meta","payload","loading","fulfilled","data","error","rejected","code","status","message","statusText","getDefaultSlice","sliceName","asyncReducers","name","initialState","extraReducers","builder","forEach","item","index","addCase"],"sources":["D:/work/tomorrow_project/src/helper/ReduxHelper.js"],"sourcesContent":["/**\r\n * /src/helper/ReduxHelper.js\r\n * \r\n * ReduxSlice를 작업하면서 반복되는 중복코드의 모듈화\r\n */\r\n\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n// 리덕스가 로딩상태를 처리하기 위한 함수\r\nfunction pending(state, {meta, payload}) {\r\n    return { ...state, loading: true }\r\n}\r\n\r\n// 리덕스가 백엔드와의 통신에 성공한 경우 실행되는 함수\r\nfunction fulfilled(state, {meta, payload}) {\r\n    return {\r\n        ...state, \r\n        data: payload,\r\n        loading: false,\r\n        error: null\r\n    }\r\n}\r\n\r\n// 리덕스가 백엔드와의 통신에 실패한 경우 실행되는 함수\r\nfunction rejected(state, {meta, payload}){\r\n    return {\r\n        data: payload, \r\n        loading: false,\r\n        error: {\r\n            code: payload?.status ? payload?.status : 500,\r\n            message: payload?.statusText ? payload?.statusText : 'Server Error'\r\n        }\r\n    }\r\n}\r\n\r\nfunction getDefaultSlice(sliceName, asyncReducers=[]){\r\n    return createSlice({\r\n        name: sliceName,\r\n        // 이 모듈이 관리하고자하는 상태값들을 명시\r\n        initialState: {\r\n            data: null,\r\n            loading: false,\r\n            error: null\r\n        },\r\n        // 상태값을 갱신하기 위한 함수들을 구현\r\n        // Ajax의 처리 과정에 따라 자동으로 실행된다.\r\n        extraReducers: (builder) => {\r\n            asyncReducers.forEach((item, index) =>{\r\n                builder.addCase(item.pending, pending);\r\n                builder.addCase(item.fulfilled, fulfilled);\r\n                builder.addCase(item.rejected, rejected);\r\n            });\r\n        },\r\n    });\r\n}\r\n\r\nexport default getDefaultSlice;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,SAASA,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,SAASC,OAAOA,CAACC,KAAK,EAAE;EAACC,IAAI;EAAEC;AAAO,CAAC,EAAE;EACrC,OAAO;IAAE,GAAGF,KAAK;IAAEG,OAAO,EAAE;EAAK,CAAC;AACtC;;AAEA;AACA,SAASC,SAASA,CAACJ,KAAK,EAAE;EAACC,IAAI;EAAEC;AAAO,CAAC,EAAE;EACvC,OAAO;IACH,GAAGF,KAAK;IACRK,IAAI,EAAEH,OAAO;IACbC,OAAO,EAAE,KAAK;IACdG,KAAK,EAAE;EACX,CAAC;AACL;;AAEA;AACA,SAASC,QAAQA,CAACP,KAAK,EAAE;EAACC,IAAI;EAAEC;AAAO,CAAC,EAAC;EACrC,OAAO;IACHG,IAAI,EAAEH,OAAO;IACbC,OAAO,EAAE,KAAK;IACdG,KAAK,EAAE;MACHE,IAAI,EAAEN,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEO,MAAM,GAAGP,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEO,MAAM,GAAG,GAAG;MAC7CC,OAAO,EAAER,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAES,UAAU,GAAGT,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAES,UAAU,GAAG;IACzD;EACJ,CAAC;AACL;AAEA,SAASC,eAAeA,CAACC,SAAS,EAAEC,aAAa,GAAC,EAAE,EAAC;EACjD,OAAOhB,WAAW,CAAC;IACfiB,IAAI,EAAEF,SAAS;IACf;IACAG,YAAY,EAAE;MACVX,IAAI,EAAE,IAAI;MACVF,OAAO,EAAE,KAAK;MACdG,KAAK,EAAE;IACX,CAAC;IACD;IACA;IACAW,aAAa,EAAGC,OAAO,IAAK;MACxBJ,aAAa,CAACK,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAI;QAClCH,OAAO,CAACI,OAAO,CAACF,IAAI,CAACrB,OAAO,EAAEA,OAAO,CAAC;QACtCmB,OAAO,CAACI,OAAO,CAACF,IAAI,CAAChB,SAAS,EAAEA,SAAS,CAAC;QAC1Cc,OAAO,CAACI,OAAO,CAACF,IAAI,CAACb,QAAQ,EAAEA,QAAQ,CAAC;MAC5C,CAAC,CAAC;IACN;EACJ,CAAC,CAAC;AACN;AAEA,eAAeK,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}